package com.eps.buscamines2.fragments;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;

import android.os.CountDownTimer;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.GridView;
import android.widget.TextView;

import com.eps.buscamines2.util.MSGeneratorMap;
import com.eps.buscamines2.activities.MailSender;
import com.eps.buscamines2.activities.PreStartActivity;
import com.eps.buscamines2.R;
import com.eps.buscamines2.adapters.ButtonAdapter;

import java.util.Objects;

import static com.eps.buscamines2.util.Constants.*;

/**
 * A simple {@link Fragment} subclass.
 * Use the {@link MinesweeperFragment newInstance} factory method to
 * create an instance of this fragment.
 */
public class MinesweeperFragment extends Fragment {
    //BUSCAMINAS
    GridView gridView;
    ButtonAdapter buttonAdapter;

    int SIZE;
    Double ENTROPY;
    MSGeneratorMap instance;
    //TEMPORARY ONLY TO WORK
    public Activity activity;
    private MinesweeperEvents listener;


    //lAYOUT SHOWN
    public View screen;
    //common countdown, cronometer
    public static TextView crono;
    //countdown
    public static int SECONDS =20;
    public static CountDownTimer countDownTimer;
    public static long current_time=SECONDS*1000;
    public static Boolean isStarted = false;
    public static Boolean forcedStop=false;

    public MinesweeperFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        // ignorar
        super.onCreate(savedInstanceState);
        //if (getArguments() != null) {
        //    mParam1 = getArguments().getString(ARG_PARAM1);
        //    mParam2 = getArguments().getString(ARG_PARAM2);
        //}

    }


    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_minsweeper, container, false);
    }

  
    ////////////////////////////////////////////////////////////////////////////////////////////////////



    @Override
    public void onAttach(@NonNull Context context) {
        //TEMPORARY ONLY TO WORK
        super.onAttach(context);
        try {
            listener= (MinesweeperEvents) context;

        }catch (ClassCastException e){
            throw new ClassCastException(context.toString() +" Must implement MockListener");
        }

        if (context instanceof Activity){
            activity =(Activity) context;
            Intent a = activity.getIntent();
            if (a!=null){
                SIZE=a.getExtras().getInt(PRESTART_SIZE);
                ENTROPY=a.getExtras().getDouble(PRESTART_ENTROPY);

                Log.wtf("OnAttach","\nUsername     = "+a.getExtras().getString(PRESTART_USERNAME)+
                        "\nSize         = "+a.getExtras().getInt(PRESTART_SIZE)+
                        "\nTime control = "+a.getExtras().getBoolean(PRESTART_TIME_BOOLEAN)+
                        "\nEntropy      = "+a.getExtras().getDouble(PRESTART_ENTROPY)+"%");

            }else{
                Log.wtf("TAG ","NULL");
            }

            Log.i(getClass().getName(),"-------->ATTACHED ACTIVITY");
        }
    }



    @Override
    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
        // "On create del fragment"
        screen = view;
        super.onViewCreated(view, savedInstanceState);



        Log.wtf("entrada reaÃ±","\nUsername     = "+PreStartActivity.username+
                "\nSize         = "+SIZE+
                "\nTime control = "+PreStartActivity.time_control+
                "\nEntropy      = "+ENTROPY+"%"+
                "\nMines      = "+((int)Math.floor(ENTROPY*SIZE*SIZE)));

        //startDisplay(savedInstanceState);
    }



    private void startDisplay(Bundle savedInstanceState) {
        if(savedInstanceState!=null){
            Log.i(MinesweeperFragment.class.getSimpleName(),"startDisplay: Recreating display");
            onRestoreInstanceState(savedInstanceState);
            Log.i(MinesweeperFragment.class.getSimpleName(),"instance ="+instance+" --> Map state restored!");
            buttonAdapter = new ButtonAdapter(Objects.requireNonNull(getActivity()).getBaseContext(),instance.getSize(),listener);
        }else {
            Log.i(MinesweeperFragment.class.getSimpleName(),"startDisplay: Starting display");
            instance =  MSGeneratorMap.getInstance(SIZE,ENTROPY);
            instance.generate();
            Log.i(MinesweeperFragment.class.getSimpleName(),"instance ="+instance+" --> Map generated!");
            Log.i(MinesweeperFragment.class.getSimpleName(),"new Instance="+SIZE+" -->"+ENTROPY);
            buttonAdapter = new ButtonAdapter(Objects.requireNonNull(getActivity()).getBaseContext(),SIZE,listener);
        }


        gridView = screen.findViewById(R.id.minesweeperGridview);
        gridView.setNumColumns(SIZE);
        gridView.setAdapter(buttonAdapter);


        setTimerTextViews(savedInstanceState);
    }

    private void setTimerTextViews(Bundle savedInstanceState) {
        Log.i(getClass().getName(),"--------> savedInstanceState="+((savedInstanceState==null)? "null": "Exists"));
        if (savedInstanceState != null) {
            //aquestes merdes del cronometre
        }else{
            // reseting in saved instance=null
            // inicalitzar les merdes del crono
        }
        crono = screen.findViewById(R.id.crono);
        TextView titleView= screen.findViewById(R.id.textView0);

        if (!PreStartActivity.time_control){
            titleView.setText(getString(R.string.crono_text));
            crono.setText("00:00:00");//??
        }else{
            titleView.setText(getString(R.string.countdown_text));
            crono.setText("00:00");//??
            if (!isStarted){
                current_time=SECONDS*1000;
            }
            Log.v(getClass().getName()," CREATED="+current_time);


            countDownTimer = new MiContador(current_time);
            countDownTimer.start();

        }


    }

    public void onRestoreInstanceState(Bundle savedInstanceState) {
        instance = savedInstanceState.getParcelable(MINESWEEPER_MAP);

    }
    @Override
    public void onSaveInstanceState(@NonNull Bundle outState) {
        outState.putParcelable(MINESWEEPER_MAP,instance);
        super.onSaveInstanceState(outState);
    }


    public class MiContador extends CountDownTimer {
        final int STEP = 1000;
        public MiContador(long lastCountDown_) {
            super(lastCountDown_,1000);
            MinesweeperFragment.forcedStop=false;

        }

        @Override
        public void onTick(long millisUntilFinished) {
            System.out.println("Forced stop? "+MinesweeperFragment.forcedStop);

            MinesweeperFragment.current_time = millisUntilFinished;
            if ((millisUntilFinished / 1000)==0){
                MinesweeperFragment.isStarted=false;
            }else {
                MinesweeperFragment.isStarted=true;
            }
            long minutos= (millisUntilFinished / STEP) /60;
            long segundos=(millisUntilFinished / STEP)%60;
            String current_time="";

            if ((minutos<10)){
                current_time+="0"+minutos;
            }else{
                current_time+=""+minutos;
            }
            current_time+=":";
            if ((segundos<10)){
                current_time+="0"+segundos;
            }else{
                current_time+=""+segundos;
            }
            Log.v(getClass().getName()," time="+current_time);

            MinesweeperFragment.crono.setText(current_time);
        }

        @Override
        public void onFinish() {
            MinesweeperFragment.isStarted = false;
            if (!forcedStop){
                gameover();
            }else {
                System.out.println("Ignoring Game Over because was forced to stop");
            }

        }

    }
    @Override
    public void onPause() {
       if (PreStartActivity.time_control){
            countDownTimer.cancel();
       }else {
        //    Cronometer.running=false;
        //    Log.i(getClass().getName()," "+timer.isAlive());

       }
        super.onPause();
    }
    @Override
    public void onResume() {
        if(PreStartActivity.time_control) {
        // countdown

            if (isStarted) {
                countDownTimer = new MiContador(current_time);
                countDownTimer.start();
            }

        }else {
        //    Cronometer.running=false;

        //cronometro
        }
        super.onResume();

    }

    @Override
    public void onDestroy() {
        // ensure cancellation of countdowns or cronometers
        if(PreStartActivity.time_control) {
            // countdown
            forcedStop=true;
            countDownTimer.cancel();

        }else {
        //    Cronometer.running=false;

            //cronometro
        }
        super.onDestroy();
    }

    private void gameover() {
        //PreStartActivity.time_control  true=countdown  False=cronometro

        //System.out.println("GAME OVER!!! forcedStop="+forcedStop+" && isOn="+isOn);  //forcedStop=false && isOn=false timeout->exit
        //forcedStop=false && isOn=true timeout->ignore??
        if(PreStartActivity.time_control){
        //    if (!forcedStop){
        //        winState=2;
                Intent in = new Intent(activity.getBaseContext(), MailSender.class);
                in.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                in.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(in);
                activity.finish();


         //   }else {
                System.out.println("Ignoring Game Over because was forced to stop");
         //   }
        }else{
            System.out.println("TInc el puto crono no me cuentes tu vida con el countdown");
        }

    }



    public interface MinesweeperEvents{
        public void onEventIsDetected(String mockparam);
    }
    public  void setOnEventListener(MinesweeperEvents listener){
        this.listener=listener;
    }
}